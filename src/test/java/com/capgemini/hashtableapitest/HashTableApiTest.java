/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.capgemini.hashtableapitest;

import org.junit.Test;
import com.capgemini.hashtableapi.*;

import junit.framework.Assert;

import static org.junit.Assert.*;

public class HashTableApiTest {
	@Test
	public void givenASentenceWhenWordsAreAddedToListShouldReturnWordFrequency() {
		String sentence = "To be or not to be";
		MyHashMap<String, Integer> myHashMap = new MyHashMap<>();
		String[] words = sentence.toLowerCase().split(" ");
		for (String word : words) {
			Integer value = myHashMap.get(word);
			if (value == null)
				value = 1;
			else
				value = value + 1;
			myHashMap.add(word, value);
		}
		int frequency = myHashMap.get("to");
		System.out.println(myHashMap);
		Assert.assertEquals(2, frequency);
	}

	@Test
	public void givenAParagraphWhenWordsAreAddedToListShouldReturnWordFrequency() {
		String sentence = "Paranoids are not paranoid because they are paranoid but "
				+ "Because they keep putting themselves deliberately into " + "paranoid avoidable situations";
		MyLinkedHashMap<String, Integer> myLinkedHashMap = new MyLinkedHashMap<>();
		String[] words = sentence.toLowerCase().split(" ");
		for (String word : words) {
			Integer value = myLinkedHashMap.get(word);
			if (value == null)
				value = 1;
			else
				value = value + 1;
			myLinkedHashMap.add(word, value);
		}
		int frequency = myLinkedHashMap.get("paranoid");
		System.out.println(myLinkedHashMap);
		Assert.assertEquals(3, frequency);
	}

	@Test(expected = Exception.class)
	public void givenWordShouldRemoveFromTheMap() {
		System.out.println("\nThis is the test to find and remove a word from the paragraph.");
		String sentence = "Paranoids are not paranoid because they are paranoid but "
				+ "because they keep putting themselves deliberately into " + "paranoid avoidable situations";
		MyLinkedHashMap<String, Integer> myMap = new MyLinkedHashMap<>();
		String[] words = sentence.toLowerCase().split(" ");
		for (String word : words) {
			Integer value = myMap.get(word);
			if (value == null)
				value = 1;
			else
				value = value + 1;
			myMap.add(word, value);
		}

		MyMapNode<String, Integer> myNode = (MyMapNode<String, Integer>) myMap.remove("avoidable");
		System.out.println(myMap);
		Assert.assertEquals(myNode.getNext().getKey(), null);
	}
}
